### This file is to hold a WIP for the stock price forecasting section ###

library(shiny)
library(shinydashboard)
library(plotly)
library(forecast)
library(bsts)
library(DT)
library(tidyverse)
library(lubridate)
library(quantmod)
library(Metrics)
library(bizdays)
library(TTR)
library(zoo)
library(fredr)
library(torch)

source("app.r") # Data Acquisition & Preprocessing Module

library(torch)

Seq2SeqLSTM <- nn_module(
  initialize = function(input_size, hidden_size, output_steps) {
    self$lstm <- nn_lstm(input_size = input_size, hidden_size = hidden_size, batch_first = TRUE)
    self$fc <- nn_linear(hidden_size, output_steps)
  },
  forward = function(x) {
    out <- self$lstm(x)
    last_output <- out[[1]][, dim(out[[1]])[2], , drop = FALSE]
    final_output <- self$fc(last_output$squeeze(2)) # remove unnecessary dimensions
    final_output
  }
)


model <- Seq2SeqLSTM(input_size = 1, hidden_size = 32, output_steps = 10)
x <- torch_randn(c(5, 15, 1))
output <- model(x)
print(output)

normalize_series <- function(series) {
  min_val <- min(series, na.rm = TRUE)
  max_val <- max(series, na.rm = TRUE)
  scaled <- (series - min_val) / (max_val - min_val)
  list(scaled = scaled, min_val = min_val, max_val = max_val)
}

denormalize_series <- function(scaled_series, min_val, max_val) {
  denormalized <- scaled_series * (max_val - min_val) + min_val
  denormalized
}

calculate_metrics <- function(actual, predicted) {
  rmse <- sqrt(mean((actual - predicted)^2, na.rm = TRUE))
  mape <- mean(abs((actual - predicted) / actual) * 100, na.rm = TRUE)
  list(RMSE = rmse, MAPE = mape)
}

# Preprocess prices based on user's choice
process_price_series <- function(series, transformation) {
  series <- as.numeric(series)
  if (transformation == "Log Prices") {
    series <- log(series)
  } else if (transformation == "Log Returns") {
    series <- diff(log(series))
    series <- na.omit(series)  # Remove NA introduced by differencing
  }
  return(series)
}

# Convert predictions back to original price space
invert_transformation <- function(predictions, last_observed, transformation) {
  if (transformation == "Log Prices") {
    predictions <- exp(predictions)
  } else if (transformation == "Log Returns") {
    # Reconstruct price series from returns
    predictions <- last_observed * exp(cumsum(predictions))
  }
  return(predictions)
}

# Updated Metrics to evaluate in original space 
calculate_metrics <- function(actual, predicted, transformation) {
  if (transformation == "Log Returns") {
    # Convert log returns to price level 
    actual <- exp(cumsum(actual))
    predicted <- exp(cumsum(predicted))
  } else if (transformation == "Log Prices") {
    actual <- exp(actual)
    predicted <- exp(predicted)
  }
  rmse <- sqrt(mean((actual - predicted)^2, na.rm = TRUE))
  mape <- mean(abs((actual - predicted) / actual) * 100, na.rm = TRUE)
  list(RMSE = rmse, MAPE = mape)
}


forecast_seq2seq_lstm_with_metrics <- function(series, h, transformation, input_size = 1, hidden_size = 32, 
                                               window_size = 15, epochs = 100, patience = 20, 
                                               learning_rate = 0.0005) {
  series <- as.numeric(series)
  series_len <- length(series)
  
  if (series_len <= window_size + h) {
    stop("Series length must be greater than window size + forecast horizon (h).")
  }
  
  train_size <- series_len - h
  train_series <- series[1:train_size]
  test_series <- series[(train_size + 1):series_len]
  
  norm <- normalize_series(train_series)
  price_tensor <- torch_tensor(norm$scaled, dtype = torch_float32(), device = "cpu")
  
  X_train <- list()
  y_train <- list()
  
  valid_samples <- 0
  for (i in seq_len(train_size - window_size - h + 1)) {
    X_train[[valid_samples + 1]] <- price_tensor[i:(i + window_size - 1)]$unsqueeze(1L)$unsqueeze(1L)
    y_train[[valid_samples + 1]] <- price_tensor[(i + window_size):(i + window_size + h - 1)]
    valid_samples <- valid_samples + 1
  }
  
  if (valid_samples == 0) {
    stop("Insufficient training samples.")
  }
  
  X_price_tensor <- torch_stack(X_train, dim = 1L)$squeeze(1L)$to(device = "cpu")
  y_price_tensor <- torch_stack(y_train, dim = 1L)$squeeze(1L)$to(device = "cpu")
  
  model <- Seq2SeqLSTM(input_size, hidden_size, h)
  model$to(device = "cpu")
  
  criterion <- nn_mse_loss()
  optimizer <- optim_adam(model$parameters, lr = learning_rate)
  
  loss_values <- numeric(epochs)
  best_loss <- Inf
  epochs_no_improve <- 0
  
  for (epoch in seq_len(epochs)) {
    optimizer$zero_grad()
    output <- model(X_price_tensor)
    
    if (!all(dim(output) == dim(y_price_tensor))) {
      stop("Shape mismatch: Output shape is ", paste(dim(output), collapse = "x"),
           " but target shape is ", paste(dim(y_price_tensor), collapse = "x"))
    }
    
    loss <- criterion(output, y_price_tensor)
    loss$backward()
    optimizer$step()
    
    loss_values[epoch] <- loss$item()
    
    if (loss$item() < best_loss) {
      best_loss <- loss$item()
      epochs_no_improve <- 0
    } else {
      epochs_no_improve <- epochs_no_improve + 1
    }
    
    if (epochs_no_improve >= patience) {
      loss_values <- loss_values[1:epoch]
      break
    }
  }
  
  if ((train_size - window_size + 1) <= 0) {
    stop("Window size is too large compared to training size")
  }
  input_seq <- price_tensor[(train_size - window_size + 1):train_size]
  
  input_tensor <- input_seq$unsqueeze(1L)$unsqueeze(-1)$to(device = "cpu")
  
  model$eval()
  tryCatch({
    preds_tensor <- model(input_tensor)
    preds <- as_array(preds_tensor)
    preds <- as.numeric(preds)
    
    if (length(preds) != h) {
      stop("Inference mismatch: Expected ", h, " steps, got ", length(preds))
    }
    
    final_predictions <- denormalize_series(preds, norm$min_val, norm$max_val)
  }, error = function(e) {
    print(paste("DEBUG: Inference Error:", conditionMessage(e)))
    stop("Inference failed during final prediction: ", conditionMessage(e))
  })
  
  metrics <- calculate_metrics(test_series, final_predictions, transformation)
  
  list(
    predictions = final_predictions,
    loss_values = loss_values,
    metrics = metrics,
    test_series = test_series,
    train_series = train_series
  )
}

ui <- dashboardPage(
  dashboardHeader(title = "Asset Forecasting App"),
  dashboardSidebar(
    textInput("symbol", "Symbols (comma-separated)", "AAPL"),
    selectInput("asset_type", "Asset Type", choices = c("stock", "forex", "crypto", "commodity", "index")),
    dateInput("start_date", "Start Date", value = Sys.Date() - years(3)),
    dateInput("end_date", "End Date", value = Sys.Date()),
    numericInput("forecast_days", "Forecast Days", 30, min = 1, max = 365),
    numericInput("epochs", "Epochs", 100, min = 1),
    numericInput("hidden_size", "Hidden Size", 128, min = 1),
    numericInput("window_size", "Window Size", 30, min = 1),
    actionButton("fetch_data", "Fetch Data"),
    actionButton("run_forecast", "Run Forecast"),
    selectInput("price_transformation", "Price Transformation", 
                choices = c("Regular Prices", "Log Prices", "Log Returns"), selected = "Regular Prices")
  ),
  dashboardBody(
    fluidRow(
      box(plotlyOutput("forecastPlot"), width = 12),
      box(dataTableOutput("table"), width = 12),
      box(plotlyOutput("lossPlot"), width = 12),
      box(dataTableOutput("metricsTable"), width = 12)
    )
  )
)

server <- function(input, output, session) {
  data <- reactiveVal(NULL)
  forecast_results <- reactiveVal(NULL)
  
  # Fetch Data
  observeEvent(input$fetch_data, {
    req(input$symbol, input$start_date, input$end_date)
    symbols <- strsplit(input$symbol, ",")[[1]] %>% trimws()
    
    fetched_data <- lapply(symbols, function(sym) {
      cat("Fetching data for:", sym, "\n")
      result <- process_asset_data(sym, input$asset_type, input$start_date, input$end_date)
      if (is.null(result)) cat("Failed to fetch data for:", sym, "\n")
      result
    })
    
    fetched_data <- fetched_data[!sapply(fetched_data, is.null)]
    
    if (length(fetched_data) == 0) {
      showNotification("No data could be fetched. Please check the symbols or date range.", type = "error")
      return(NULL)
    }
    
    combined_data <- bind_rows(fetched_data)
    data(combined_data)
    
    showNotification("Data fetching complete!", type = "message")
  })
  
  # Forecasting Logic
  observeEvent(input$run_forecast, {
    df <- data()
    req(df)
    
    forecasts <- lapply(unique(df$Symbol), function(sym) {
      symbol_df <- df %>% filter(Symbol == sym)
      transformation <- input$price_transformation
      price_series <- process_price_series(symbol_df$Price, transformation)
      last_observed_price <- tail(symbol_df$Price, 1)
      
      
      h <- input$forecast_days
      train_size <- length(price_series) - h
      
      if (train_size <= 0) {
        showNotification(paste("Not enough data for", sym, "to forecast"), type = "error")
        return(NULL)
      }
      
      tryCatch({
        # LSTM Forecast
        lstm_result <- forecast_seq2seq_lstm_with_metrics(
          price_series,
          h,
          transformation,
          hidden_size = input$hidden_size,
          window_size = input$window_size,
          epochs = input$epochs
        )
        
        lstm_result$predictions <- invert_transformation(lstm_result$predictions, last_observed_price, transformation)
        lstm_result$metrics <- calculate_metrics(
          symbol_df$Price[(train_size + 1):nrow(symbol_df)],
          lstm_result$predictions,
          transformation
        )
        
        
        # ARIMA Forecast
        arima_model <- auto.arima(price_series[1:train_size])
        arima_forecast <- forecast(arima_model, h = h)
        arima_predicted <- as.numeric(arima_forecast$mean)
        arima_predicted <- invert_transformation(arima_predicted, last_observed_price, transformation)
        arima_metrics <- calculate_metrics(symbol_df$Price[(train_size + 1):nrow(symbol_df)], arima_predicted, transformation)
        arima_result <- list(predicted = arima_predicted, metrics = arima_metrics)
        
        # BSTS Forecast
        state_spec <- AddLocalLinearTrend(list(), price_series[1:train_size])
        bsts_model <- bsts(price_series[1:train_size], state.specification = state_spec, niter = 5000)
        bsts_forecast <- predict(bsts_model, horizon = h)
        bsts_predicted <- as.numeric(bsts_forecast$mean)
        bsts_predicted <- invert_transformation(bsts_predicted, last_observed_price, transformation)
        bsts_metrics <- calculate_metrics(symbol_df$Price[(train_size + 1):nrow(symbol_df)], bsts_predicted, transformation)
        bsts_result <- list(predicted = bsts_predicted, metrics = bsts_metrics)
        
        # Hybrid Ensemble Forecast
        hybrid_predicted <- (lstm_result$predictions + arima_predicted + bsts_predicted) / 3
        hybrid_metrics <- calculate_metrics(
          symbol_df$Price[(train_size + 1):nrow(symbol_df)],
          hybrid_predicted,
          transformation
        )
        hybrid_result <- list(predicted = hybrid_predicted, metrics = hybrid_metrics)
        
        # Bundle results per symbol
        list(
          Symbol = sym,
          LSTM = lstm_result,
          ARIMA = arima_result,
          BSTS = bsts_result,
          Hybrid = hybrid_result
        )
      }, error = function(e) {
        showNotification(paste("Forecasting failed for", sym, ":", conditionMessage(e)), type = "error")
        print(e)
        return(NULL)
      })
    })
    
    forecasts <- forecasts[!sapply(forecasts, is.null)]
    forecast_results(forecasts)
  })
  
  
  
  # Render Data Table
  output$table <- renderDataTable({
    df <- data()
    req(df)
    df
  })
  
  # Multi-Model Forecast Plot Integration for ARIMA, BSTS, Hybrid with LSTM
  
  output$forecastPlot <- renderPlotly({
    df <- data()
    forecasts <- forecast_results()
    transformation <- input$price_transformation
    req(df, forecasts, transformation)
    
    if (length(forecasts) == 0) {
      showNotification("No forecasts available for plotting.", type = "error")
      return(NULL)
    }
    
    first_forecast <- forecasts[[1]]
    lstm_result <- first_forecast$LSTM
    arima_result <- first_forecast$ARIMA
    bsts_result <- first_forecast$BSTS
    hybrid_result <- first_forecast$Hybrid
    
    req(lstm_result, arima_result, bsts_result, hybrid_result)
    
    train_size <- length(lstm_result$train_series)
    h <- length(lstm_result$predictions)
    
    last_date <- max(df$Date, na.rm = TRUE)
    future_dates <- seq.Date(last_date + 1, by = "day", length.out = h)
    
    lstm_forecast <- as.numeric(lstm_result$predictions)
    arima_forecast <- as.numeric(arima_result$predicted)
    bsts_forecast <- as.numeric(bsts_result$predicted)
    hybrid_forecast <- as.numeric(hybrid_result$predicted)
    
    min_h <- min(length(lstm_forecast), length(arima_forecast), length(bsts_forecast), length(hybrid_forecast), length(future_dates))
    lstm_forecast <- lstm_forecast[1:min_h]
    arima_forecast <- arima_forecast[1:min_h]
    bsts_forecast <- bsts_forecast[1:min_h]
    hybrid_forecast <- hybrid_forecast[1:min_h]
    future_dates <- future_dates[1:min_h]
    
    y_axis_label <- switch(transformation,
                           "Regular Prices" = "Price",
                           "Log Prices" = "Log Price",
                           "Log Returns" = "Log Return")
    
    plot_ly() %>%
      add_lines(
        x = df$Date,
        y = df$Price,
        name = "Actual Price",
        line = list(color = 'blue')
      ) %>%
      add_lines(
        x = future_dates,
        y = lstm_forecast,
        name = "LSTM Forecast",
        line = list(color = 'red', dash = 'dot')
      ) %>%
      add_lines(
        x = future_dates,
        y = arima_forecast,
        name = "ARIMA Forecast",
        line = list(color = 'green', dash = 'dash')
      ) %>%
      add_lines(
        x = future_dates,
        y = bsts_forecast,
        name = "BSTS Forecast",
        line = list(color = 'purple', dash = 'dashdot')
      ) %>%
      add_lines(
        x = future_dates,
        y = hybrid_forecast,
        name = "Hybrid Ensemble",
        line = list(color = 'black', dash = 'solid')
      ) %>%
      layout(
        title = paste("Multi-Model Forecast for", first_forecast$Symbol),
        xaxis = list(title = "Date"),
        yaxis = list(title = y_axis_label),
        legend = list(x = 0.01, y = 0.99)
      )
  })


  # Plot LSTM Loss Curve
  output$lossPlot <- renderPlotly({
    forecasts <- forecast_results()
    req(forecasts)
    
    first_forecast <- forecasts[[1]]
    req(!is.null(first_forecast$LSTM))
    
    lstm_losses <- first_forecast$LSTM$loss_values
    
    if (is.null(lstm_losses) || length(lstm_losses) == 0 || all(is.na(lstm_losses))) {
      showNotification("No valid loss values for plotting.", type = "error")
      return(NULL)
    }
    
    plot_ly(
      x = seq_along(lstm_losses),
      y = lstm_losses,
      type = 'scatter',
      mode = 'lines',
      name = "LSTM Loss"
    ) %>%
      layout(title = "LSTM Loss Curve")
  })
  

  # Metrics Table
  
  output$metricsTable <- renderDataTable({
    forecasts <- forecast_results()
    req(forecasts)
    
    metrics_df <- map_dfr(forecasts, ~{
      tibble(
        Symbol = .x$Symbol,
        Model = c("LSTM", "ARIMA", "BSTS", "Hybrid"),
        RMSE = c(.x$LSTM$metrics$RMSE, .x$ARIMA$metrics$RMSE, .x$BSTS$metrics$RMSE, .x$Hybrid$metrics$RMSE),
        MAPE = c(.x$LSTM$metrics$MAPE, .x$ARIMA$metrics$MAPE, .x$BSTS$metrics$MAPE, .x$Hybrid$metrics$MAPE)
      )
    })
    metrics_df
  })
}




shinyApp(ui, server)
