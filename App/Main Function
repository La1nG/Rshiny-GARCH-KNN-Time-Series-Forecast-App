# Server Section
server <- function(input, output, session) {
  # Fetch Stock Data (Multivariate)
  stockData <- eventReactive(input$analyze, {
    req(input$ticker, input$daterange)
    tryCatch({
      getSymbols(input$ticker, src = "yahoo",
                 from = input$daterange[1],
                 to = input$daterange[2],
                 auto.assign = TRUE)
      na.omit(do.call(merge, lapply(input$ticker, function(x) Cl(get(x)))))
    }, error = function(e) {
      showNotification("Data fetch failed. Check inputs.", type = "error")
      NULL
    })
  })
  
  # GARCH Model (Univariate)
  garchModel <- reactive({
    req(stockData(), input$garch_model)
    returns <- na.omit(diff(log(stockData()[,1])))  # First asset
    
    spec <- ugarchspec(
      variance.model = list(model = input$garch_model, garchOrder = c(1,1)),
      mean.model = list(armaOrder = c(0,0)),
      distribution.model = "std"
    )
    
    tryCatch({
      ugarchfit(spec, data = returns)
    }, error = function(e) {
      showNotification("GARCH fit failed", type = "error")
      NULL
    })
  })
  
  # DCC Model (Multivariate)
  dccModel <- reactive({
    req(stockData(), input$garch_model)
    if (length(input$ticker) < 2) {
      showNotification("DCC model requires at least two assets.", type = "error")
      return(NULL)
    }
    
    returns <- na.omit(apply(stockData(), 2, function(x) diff(log(x))))
    
    # GARCH specification for each asset
    garch_spec <- lapply(1:ncol(returns), function(x) {
      tryCatch({
        ugarchspec(variance.model = list(model = input$garch_model, 
                                         garchOrder = c(1,1)),
                   distribution.model = "std")
      }, error = function(e) {
        showNotification(paste("GARCH spec failed for asset", x), type = "error")
        NULL
      })
    })
    
    if (any(sapply(garch_spec, is.null))) {
      return(NULL)
    }
    
    dcc_spec <- dccspec(multispec(garch_spec), VAR = FALSE, model = "DCC")
    tryCatch({
      dccfit(dcc_spec, data = returns)
    }, error = function(e) {
      showNotification("DCC fit failed", type = "error")
      NULL
    })
  })
  
# Historical Risk debugging Measures
rollRisk <- reactive({
  req(garchModel(), input$window)
  
  # Check if data is available
  data_length <- length(garchModel()@model$model$data)
  if (data_length <= 0) {
    showNotification("No data available for rolling risk calculation.", type = "error")
    return(NULL)
  }
  
  # Validate window size
  if (input$window >= data_length) {
    showNotification(paste("Window size too large for data length.", data_length - 1), type = "error")
    return(NULL)
  }
  
  tryCatch({
    ugarchroll(
      garchModel()@model$spec,
      data = garchModel()@model$model$data,
      window.size = input$window,
      refit.every = 10
    )
  }, error = function(e) {
    showNotification("Rolling risk calculation failed", type = "error")
    NULL
  })
})
  
  # GARCH Forecast
  output$modelSummary <- renderPrint({
    if(!is.null(garchModel())) show(garchModel()) else "Model unavailable"
  })
  
   output$garchForecastPlot <- renderPlotly({
    req(garchModel())
    fit <- garchModel()
    forecast <- ugarchforecast(fit, n.ahead = 30)
    vol_forecast <- sigma(forecast)^2
    
    forecast_dates <- seq(from = Sys.Date() + 1, by = "day", length.out = 30)
    
    plot_ly(x = forecast_dates, y = vol_forecast, type = "scatter", mode = "lines", name = "GARCH Forecast") %>%
      layout(title = "GARCH Forecast",
             xaxis = list(title = "Date"),
             yaxis = list(title = "Variance"),
             showlegend = TRUE)
  })
  
  # DCC Output
  output$dccPlot <- renderPlotly({
    req(dccModel())
    corr <- rcor(dccModel())[,,dim(rcor(dccModel()))[3]]
    plot_ly(z = corr, type = "heatmap", 
            x = input$ticker, y = input$ticker) %>%
      layout(title = "Dynamic Conditional Correlations")
  })
  
  # Historical Risk Output
  output$historicalRiskPlot <- renderPlotly({
    req(rollRisk())
    df <- data.frame(
      Date = index(rollRisk()@forecast$VaR),
      VaR = rollRisk()@forecast$VaR[,1],
      ES = rollRisk()@forecast$ES[,1]
    )
    plot_ly(df, x = ~Date) %>%
      add_lines(y = ~VaR, name = "VaR") %>%
      add_lines(y = ~ES, name = "ES") %>%
      layout(title = "Historical Risk Measures")
  })
  
  # VaR Calculation
  calculateVaR <- reactive({
    req(garchModel(), input$garch_model)
    alpha <- 0.05
    df <- coef(garchModel())["shape"]
    sigma <- sigma(garchModel())
    mu <- fitted(garchModel())
    
    if(input$garch_model == "gjrGARCH") {
      # Adjust for leverage effects
      gamma <- coef(garchModel())["gamma1"]
      sigma <- sigma * (1 + gamma/2)
    }
    
    VaR <- mu + sigma * qt(alpha, df = df)
    mean(VaR)
  })
  
  # Calculate Sharpe Ratio
  calculateSharpeRatio <- reactive({
    req(stockData())
    returns <- na.omit(diff(log(Cl(stockData()))))
    risk_free_rate <- 0.02
    daily_risk_free <- risk_free_rate / 252
    excess_returns <- returns - daily_risk_free
    mean_excess <- mean(excess_returns)
    volatility <- sd(excess_returns)
    sharpe_ratio <- mean_excess / volatility
    annualised_sharpe_ratio <- sharpe_ratio * sqrt(252)
    annualised_sharpe_ratio
  })
  
  # ES Calculation
  calculateES <- reactive({
    req(garchModel())
    alpha <- 0.05
    df <- coef(garchModel())["shape"]
    t_quantile <- qt(alpha, df = df)
    ES <- (dt(t_quantile, df)/alpha) * (df + t_quantile^2)/(df - 1)
    mean(ES)
  })
  
  # Outputs
  output$varResult <- renderText({
    paste("1-Day 95% VaR:", round(calculateVaR(), 4))
  })
  
  output$esResult <- renderText({
    paste("1-Day 95% ES:", round(calculateES(), 4))
  })
  
# forecast
  output$forecastPlot <- renderPlotly({
    req(stockData(), garchModel())
    fit <- garchModel()
    forecast <- ugarchforecast(fit, n.ahead = 30)
    vol_forecast <- sigma(forecast)
    mu <- coef(fit)["mu"]
    last_close <- as.numeric(tail(stockData()[,1], 1))
    forecast_prices <- last_close * exp(cumsum(rnorm(30, mean = mu, sd = vol_forecast)))
    
    plot_ly(x = 1:30, y = forecast_prices, type = "scatter", mode = "lines") %>%
      layout(title = "Price Forecast", xaxis = list(title = "Days Ahead"))
  })
  
  # RMSE vs K Plot
  output$rmsePlot <- renderPlotly({
    req(stockData())
    returns <- na.omit(diff(log(Cl(stockData()))))
    set.seed(42)
    trainIndex <- createDataPartition(returns, p = 0.8, list = FALSE)
    train <- returns[trainIndex]
    test <- returns[-trainIndex]
    
    rmse_values <- sapply(1:input$k, function(k) {
      model <- knn.reg(train = train, test = test, y = train, k = k)
      sqrt(mean((model$pred - test)^2))
    })
    plot_ly(x = 1:input$k, y = rmse_values, type = "scatter", mode = "lines", name = "RMSE vs K") %>%
      layout(title = "RMSE vs K for K-NN", xaxis = list(title = "Number of Neighbors (K)"), yaxis = list(title = "RMSE"))
  })
  
  output$sharpeRatioResult <- renderText({
    req(calculateSharpeRatio())
    paste("Sharpe Ratio:", round(calculateSharpeRatio(), 2))
  })
}

shinyApp(ui = ui, server = server)
